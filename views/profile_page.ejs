<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SpyThere - Profile</title>
  <link rel="stylesheet" href="/home_page.css">
</head>
<body class="profile-page">

  <!-- Header -->
  <%- include('partials/header') %>

  <div class="app-layout">
    <!-- Navbar -->
    <%- include('partials/navbar') %>

    <!-- Main Content -->
    <div class="main-content">
      
      <!-- Profile Information Section -->
      <div class="profile-info-container">
        <div class="profile-header">
          <h2><%= username %>'s Profile</h2>
          <button id="edit-profile-btn" class="edit-profile-btn">Edit Profile</button>
        </div>
        
        <% if (typeof error !== 'undefined' && error) { %>
          <div class="error-message">
            <%= error %>
          </div>
        <% } %>
        
        <% if (typeof success !== 'undefined' && success) { %>
          <div class="success-message">
            <%= success %>
          </div>
        <% } %>
        
        <div class="profile-details">
          <div class="profile-field">
            <span class="field-label">Username:</span>
            <span class="field-value"><%= username %></span>
          </div>
          <div class="profile-field">
            <span class="field-label">Email:</span>
            <span class="field-value"><%= email %></span>
          </div>
        </div>
      </div>

      <!-- Posts List Section (todo list inspired)-->
      <div class="todo-container">
        <h2><%= username %>'s Posts</h2>
        <ul>
          <% if (posts.length > 0) { %>
            <% posts.forEach(post => { %>
              <li data-post-id="<%= post.id %>">
                <strong><%= post.username %></strong>
                <%= post.value %>
                <div class="post-actions-container">
                  <img src="/assets/Edit_Icon.png" alt="Edit" class="post-action-icon edit-post-btn">
                  <img src="/assets/Delete_Icon.png" alt="Delete" class="post-action-icon delete-post-btn">
                </div>
              </li>
            <% }) %>
          <% } else { %>
            <li>No posts to show.</li>
          <% } %>
        </ul>
      </div>

      <!-- Modal for Edit Post -->
      <div id="edit-post-modal" class="modal">
        <div class="modal-content">
          <button id="close-edit-post-modal" class="close-modal">Ã—</button>
          <h3>Edit Post</h3>
      
          <form id="edit-post-form">
            <input type="hidden" id="edit-post-id" name="postId">
      
            <textarea id="edit-post-text" name="text" placeholder="Edit your post..."></textarea>
      
            <div class="modal-btns">
              <button type="button" id="cancel-edit-post-btn" class="modal-btn">Cancel</button>
              <button type="submit" class="modal-btn">Save Changes</button>
            </div>
          </form>
        </div>
      </div>
      
      <!-- Modal for Delete Post Confirmation -->
      <div id="delete-post-confirm-modal" class="modal">
        <div class="modal-content">
          <h3>Delete Post</h3>
          <p>Are you sure you want to delete this post? This action cannot be undone.</p>
      
          <input type="hidden" id="delete-post-id">
      
          <div class="delete-modal-buttons">
            <button id="cancel-delete-post-btn" class="modal-btn cancel-btn">Cancel</button>
            <button id="confirm-delete-post-btn" class="modal-btn delete-btn">Delete</button>
          </div>
        </div>
      </div>

      <!-- Modal for Adding Post -->
      <div id="post-modal">
        <div id="modal-content">
          <form action="/submit-post" method="post" id="post-form">
            <h1>Create to Web</h1>
            <textarea name="post" id="post" placeholder="What's on your mind..."></textarea>
            <div id="modal-btns">
              <button id="close-modal-btn" class="modal-btn" type="button">Cancel</button>
              <input type="submit" value="Post" id="post-content-btn" class="modal-btn">
            </div>
          </form>
        </div>
      </div>
      
      <!-- Modal for Edit Profile -->
      <div id="edit-profile-modal">
        <div class="modal-content">
          <h1>Edit Profile</h1>
          <form action="/update-profile" method="post" id="edit-profile-form">
            <div class="form-group">
              <label for="edit-username">Username</label>
              <input type="text" id="edit-username" name="username" value="<%= username %>" required>
            </div>
            
            <div class="form-group">
              <label for="edit-email">Email</label>
              <input type="email" id="edit-email" name="email" value="<%= email %>" required>
            </div>
            
            <div class="form-group">
              <label for="current-password">Current Password (required to save changes)</label>
              <input type="password" id="current-password" name="currentPassword" required>
            </div>
            
            <div class="modal-btns">
              <button id="close-edit-modal-btn" class="modal-btn" type="button">Cancel</button>
              <input type="submit" value="Save Changes" class="modal-btn">
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script src="/scripts/index.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Post edit and delete functionality
      const editPostBtns = document.querySelectorAll('.edit-post-btn');
      const deletePostBtns = document.querySelectorAll('.delete-post-btn');
      const editPostModal = document.getElementById('edit-post-modal');
      const closeEditPostBtn = document.getElementById('close-edit-post-modal');
      const cancelEditPostBtn = document.getElementById('cancel-edit-post-btn');
      const editPostForm = document.getElementById('edit-post-form');
      const deletePostConfirmModal = document.getElementById('delete-post-confirm-modal');
      const cancelDeletePostBtn = document.getElementById('cancel-delete-post-btn');
      const confirmDeletePostBtn = document.getElementById('confirm-delete-post-btn');

      // Edit post functionality
      editPostBtns.forEach(btn => {
        btn.addEventListener('click', function () {
          const postItem = this.closest('li');
          const postId = postItem.dataset.postId;
          const postContent = postItem.textContent.trim();

          // Extract post content (excluding username)
          const postText = postContent.substring(postContent.indexOf(' ') + 1).trim();

          // Set up edit modal
          document.getElementById('edit-post-id').value = postId;
          document.getElementById('edit-post-text').value = postText;

          // Show edit modal
          editPostModal.style.display = 'block';
        });
      });

      // Close edit post modal
      function closeEditPostModal() {
        editPostModal.style.display = 'none';
      }

      if (closeEditPostBtn) {
        closeEditPostBtn.addEventListener('click', closeEditPostModal);
      }

      if (cancelEditPostBtn) {
        cancelEditPostBtn.addEventListener('click', closeEditPostModal);
      }

      // Close modal when clicking outside
      window.addEventListener('click', function (e) {
        if (e.target === editPostModal) {
          closeEditPostModal();
        }
      });

      // Handle edit post form submission
      if (editPostForm) {
        editPostForm.addEventListener('submit', async function (e) {
          e.preventDefault();

          const postId = document.getElementById('edit-post-id').value;
          const postText = document.getElementById('edit-post-text').value.trim();

          if (!postText) {
            console.error('Post cannot be empty');
            return;
          }

          try {
            // Submit the edited post
            const response = await fetch(`/api/posts/${postId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                value: postText
              })
            });

            console.log('Edit post response status:', response.status);

            if (!response.ok) {
              const errorText = await response.text();
              console.error('Server error response:', errorText);
              throw new Error(`Server returned ${response.status}: ${errorText}`);
            }

            const updatedPost = await response.json();
            console.log('Post updated successfully:', updatedPost);

            // Update the post in the UI
            const postItem = document.querySelector(`li[data-post-id="${postId}"]`);
            if (postItem) {
              // Update content while preserving username
              const username = postItem.querySelector('strong').textContent;
              postItem.innerHTML = `
                <strong>${username}</strong>
                ${postText}
                <div class="post-actions-container">
                  <img src="/assets/Edit_Icon.png" alt="Edit" class="post-action-icon edit-post-btn">
                  <img src="/assets/Delete_Icon.png" alt="Delete" class="post-action-icon delete-post-btn">
                </div>
              `;

              // Re-attach event listeners
              const newEditBtn = postItem.querySelector('.edit-post-btn');
              const newDeleteBtn = postItem.querySelector('.delete-post-btn');

              if (newEditBtn) {
                newEditBtn.addEventListener('click', function () {
                  const postItem = this.closest('li');
                  const postId = postItem.dataset.postId;
                  const postContent = postItem.textContent.trim();
                  const postText = postContent.substring(postContent.indexOf(' ') + 1).trim();

                  document.getElementById('edit-post-id').value = postId;
                  document.getElementById('edit-post-text').value = postText;

                  editPostModal.style.display = 'block';
                });
              }

              if (newDeleteBtn) {
                newDeleteBtn.addEventListener('click', function () {
                  const postItem = this.closest('li');
                  const postId = postItem.dataset.postId;

                  document.getElementById('delete-post-id').value = postId;
                  deletePostConfirmModal.style.display = 'block';
                });
              }
            }

            // Close the modal
            closeEditPostModal();

          } catch (error) {
            console.error('Error updating post:', error);
            closeEditPostModal();
          }
        });
      }

      // Delete post functionality
      deletePostBtns.forEach(btn => {
        btn.addEventListener('click', function () {
          const postItem = this.closest('li');
          const postId = postItem.dataset.postId;

          // Set up delete confirmation modal
          document.getElementById('delete-post-id').value = postId;

          // Show delete confirmation modal
          deletePostConfirmModal.style.display = 'block';
        });
      });

      // Close delete post confirmation modal
      function closeDeletePostModal() {
        deletePostConfirmModal.style.display = 'none';
      }

      if (cancelDeletePostBtn) {
        cancelDeletePostBtn.addEventListener('click', closeDeletePostModal);
      }

      // Close modal when clicking outside
      window.addEventListener('click', function (e) {
        if (e.target === deletePostConfirmModal) {
          closeDeletePostModal();
        }
      });

      // Handle confirm delete button click
      if (confirmDeletePostBtn) {
        confirmDeletePostBtn.addEventListener('click', async function () {
          const postId = document.getElementById('delete-post-id').value;

          if (!postId) {
            console.error('Missing post information');
            return;
          }

          console.log('Sending delete request for post:', postId);
          try {
            const response = await fetch(`/api/posts/${postId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            console.log('Delete post response status:', response.status);

            if (!response.ok) {
              const errorText = await response.text();
              console.error('Server error response:', errorText);
              throw new Error(`Server returned ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('Post deleted successfully:', result);

            // Remove post from UI
            const postItem = document.querySelector(`li[data-post-id="${postId}"]`);
            if (postItem) {
              postItem.remove();

              // Check if there are no posts left
              const remainingPosts = document.querySelectorAll('.todo-container ul li');
              if (remainingPosts.length === 0) {
                const noPostsMsg = document.createElement('li');
                noPostsMsg.textContent = 'No posts to show.';
                document.querySelector('.todo-container ul').appendChild(noPostsMsg);
              }
            }

            // Close the modal
            closeDeletePostModal();

          } catch (error) {
            console.error('Error deleting post:', error);
            closeDeletePostModal();
          }
        });
      }

      // Edit Profile Modal Functionality
      const editProfileBtn = document.getElementById('edit-profile-btn');
      const editProfileModal = document.getElementById('edit-profile-modal');
      const closeEditModalBtn = document.getElementById('close-edit-modal-btn');
      
      // Open modal when edit button is clicked
      if (editProfileBtn && editProfileModal) {
        editProfileBtn.addEventListener('click', function() {
          editProfileModal.style.display = 'block';
          document.body.style.overflow = 'hidden'; // Prevent scrolling
        });
      }
      
      // Close modal when cancel button is clicked
      if (closeEditModalBtn) {
        closeEditModalBtn.addEventListener('click', function() {
          editProfileModal.style.display = 'none';
          document.body.style.overflow = 'auto'; // Allow scrolling
        });
      }
      
      // Close modal when clicking outside
      window.addEventListener('click', function(e) {
        if (e.target === editProfileModal) {
          editProfileModal.style.display = 'none';
          document.body.style.overflow = 'auto'; // Allow scrolling
        }
      });
      
      // Handle form submission with validation
      const editProfileForm = document.getElementById('edit-profile-form');
      if (editProfileForm) {
        editProfileForm.addEventListener('submit', function(e) {
          const username = document.getElementById('edit-username').value.trim();
          const email = document.getElementById('edit-email').value.trim();
          
          if (!username || username.length < 3) {
            e.preventDefault();
            alert('Username must be at least 3 characters long');
            return;
          }
          
          if (!email || !email.includes('@') || !email.includes('.')) {
            e.preventDefault();
            alert('Please enter a valid email address');
            return;
          }
        });
      }
    });
  </script>
</body>
</html>
